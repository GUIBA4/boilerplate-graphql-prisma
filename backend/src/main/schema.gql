# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input Keys {
  email: String!
  password: String!
}

type Mutation {
  delete(id: String!, keys: Keys!): Users!
  login(data: Keys!): UserWithToken!
  singUp(data: SingUp!): Users!
  update(data: UserData!, id: String!): Users!
}

input OrderByFilter {
  mode: OrderByMode = ASC
  property: String = "createdAt"
}

enum OrderByMode {
  ASC
  DESC
}

input Pagination {
  skip: Float = 0
  take: Float
}

type Query {
  getByFilters(data: UserData!, orderBy: OrderByFilter, pagination: Pagination): getAll
  getById(id: String!): Users
}

input SingUp {
  description: String
  email: String!
  nick: String!
  password: String!
  photo: String
}

input UserData {
  description: String
  email: String
  nick: String
  password: String
  photo: String
}

type UserWithToken {
  token: String!
  user: Users!
}

type Users {
  createdAt: DateTime!
  description: String
  email: String!
  id: ID!
  nick: String!
  password: String!
  photo: String
}

type getAll {
  count: Float!
  users: [Users!]!
}
